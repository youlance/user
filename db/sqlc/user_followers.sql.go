// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user_followers.sql

package db

import (
	"context"
)

const createFollower = `-- name: CreateFollower :one
INSERT INTO user_followers (
  follower_id,
  followee_id
) VALUES (
  $1, $2
) RETURNING follower_id, followee_id
`

type CreateFollowerParams struct {
	FollowerID string `json:"follower_id"`
	FolloweeID string `json:"followee_id"`
}

func (q *Queries) CreateFollower(ctx context.Context, arg CreateFollowerParams) (UserFollower, error) {
	row := q.db.QueryRowContext(ctx, createFollower, arg.FollowerID, arg.FolloweeID)
	var i UserFollower
	err := row.Scan(&i.FollowerID, &i.FolloweeID)
	return i, err
}

const deleteFollower = `-- name: DeleteFollower :exec
DELETE FROM user_followers
WHERE follower_id = $1 AND followee_id = $2
`

type DeleteFollowerParams struct {
	FollowerID string `json:"follower_id"`
	FolloweeID string `json:"followee_id"`
}

func (q *Queries) DeleteFollower(ctx context.Context, arg DeleteFollowerParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollower, arg.FollowerID, arg.FolloweeID)
	return err
}

const getFolloweesCount = `-- name: GetFolloweesCount :one
SELECT count(*) FROM user_followers
WHERE follower_id = $1
`

func (q *Queries) GetFolloweesCount(ctx context.Context, followerID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFolloweesCount, followerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listFollowees = `-- name: ListFollowees :many
SELECT follower_id, followee_id FROM user_followers
WHERE follower_id = $1
ORDER BY followee_id
LIMIT $2
OFFSET $3
`

type ListFolloweesParams struct {
	FollowerID string `json:"follower_id"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) ListFollowees(ctx context.Context, arg ListFolloweesParams) ([]UserFollower, error) {
	rows, err := q.db.QueryContext(ctx, listFollowees, arg.FollowerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserFollower{}
	for rows.Next() {
		var i UserFollower
		if err := rows.Scan(&i.FollowerID, &i.FolloweeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFollowers = `-- name: ListFollowers :many
SELECT follower_id, followee_id FROM user_followers
WHERE followee_id = $1
ORDER BY follower_id
LIMIT $2
OFFSET $3
`

type ListFollowersParams struct {
	FolloweeID string `json:"followee_id"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) ListFollowers(ctx context.Context, arg ListFollowersParams) ([]UserFollower, error) {
	rows, err := q.db.QueryContext(ctx, listFollowers, arg.FolloweeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserFollower{}
	for rows.Next() {
		var i UserFollower
		if err := rows.Scan(&i.FollowerID, &i.FolloweeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
